From 1e117e7a24bddda7d53afe8da640ac4433f6450c Mon Sep 17 00:00:00 2001
From: Tobias Flach <flach@google.com>
Date: Mon, 25 Aug 2014 16:44:23 -0700
Subject: [PATCH] net-tcp: TCP with Forward Error Correction (Common)

Implemetation of the common part of forward error correction for server and
client in TCP.

Implemented components:
* New sysctl to enable FEC (set to 1)
* Additional socket buffer pointer for a struct storing FEC control parameters
* FEC option encoding and decoding
* Negotiation during connection setup:
  - The client requests FEC usage by adding an FEC option to the SYN
    packet. That is, option kind EXP (0xFE), two magic bytes to
    identify the FEC option (0xDC60), and one extra byte to identify
    the encoding type
  - Currently supported encoding types are:
    TCP_FEC_TYPE_XOR_ALL    1  XORs every MSS length segment
    TCP_FEC_TYPE_XOR_SKIP_1 2  XORs every other MSS length segment
  - If the server supports FEC, it copies the option over to the
    SYN/ACK packet.
  - Following a successful negotiation every packet carries an FEC
    option. Regular data packets and regular acknowledgements
    carry a short FEC option with a 1-byte value encoding various
    flags. Encoded packets carry the option with a 4-byte value,
    encoding the flags and the encoding range. Acknowledgements
    after a failed recovery carry the option with a 4-byte value,
    encoding the flags and the loss range.
---
 include/linux/skbuff.h     |   4 +-
 include/linux/tcp.h        |  38 ++++++++++++++
 include/net/request_sock.h |   2 +
 include/net/tcp.h          |  10 ++++
 include/net/tcp_fec.h      |  53 +++++++++++++++++++
 include/uapi/linux/tcp.h   |   1 +
 net/ipv4/Makefile          |   2 +-
 net/ipv4/sysctl_net_ipv4.c |   9 ++++
 net/ipv4/tcp.c             |  10 ++++
 net/ipv4/tcp_fec.c         | 124 +++++++++++++++++++++++++++++++++++++++++++++
 net/ipv4/tcp_input.c       |  29 +++++++++++
 net/ipv4/tcp_ipv4.c        |   3 ++
 net/ipv4/tcp_minisocks.c   |   7 +++
 net/ipv4/tcp_output.c      |  45 ++++++++++++++++
 net/ipv6/tcp_ipv6.c        |   2 +
 15 files changed, 337 insertions(+), 2 deletions(-)
 create mode 100644 include/net/tcp_fec.h
 create mode 100644 net/ipv4/tcp_fec.c

diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index dec1748..b652f1c 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -418,8 +418,10 @@ struct sk_buff {
 	 * layer. Please put your private variables there. If you
 	 * want to keep them across layers you have to do a skb_clone()
 	 * first. This is owned by whoever has the skb queued ATM.
+	 *
+	 * Increased the CB to hold pointer to an FEC structure.
 	 */
-	char			cb[48] __aligned(8);
+	char			cb[56] __aligned(8);
 
 	unsigned long		_skb_refdst;
 #ifdef CONFIG_XFRM
diff --git a/include/linux/tcp.h b/include/linux/tcp.h
index 5adbc33..b5f23d8 100644
--- a/include/linux/tcp.h
+++ b/include/linux/tcp.h
@@ -77,6 +77,24 @@ struct tcp_sack_block {
 #define TCP_FACK_ENABLED  (1 << 1)   /*1 = FACK is enabled locally*/
 #define TCP_DSACK_SEEN    (1 << 2)   /*1 = DSACK was received from peer*/
 
+/* Flags transmitted in the first FEC option byte after magic bytes
+ * (except if option is used for negotiation) */
+#define TCP_FEC_RECOVERY_CWR		0x80	/* Recovery triggered CWR */
+#define TCP_FEC_RECOVERY_SUCCESSFUL	0x40	/* Local recovery done	  */
+#define TCP_FEC_RECOVERY_FAILED		0x20	/* Local recovery failed  */
+#define TCP_FEC_ENCODED			0x10	/* Packet is FEC-encoded  */
+
+struct tcp_fec {
+	u8	type;		/* Requested FEC type (negotiation only,
+				 * see net/tcp_fec.h for type defs)	 */
+	u32	enc_seq;	/* Sequence number of first encoded byte */
+	u32	enc_len;	/* Encoding length			 */
+	u32	lost_seq;	/* Sequence number of first lost byte	 */
+	u32	lost_len;	/* Loss length				 */
+	u8	flags;		/* See flag definitions above		 */
+	bool	saw_fec;	/* FEC option was retrieved from packet	 */
+};
+
 struct tcp_options_received {
 /*	PAWS/RTTM data	*/
 	long	ts_recent_stamp;/* Time we stored ts_recent (for aging) */
@@ -93,12 +111,14 @@ struct tcp_options_received {
 	u8	num_sacks;	/* Number of SACK blocks		*/
 	u16	user_mss;	/* mss requested by user in ioctl	*/
 	u16	mss_clamp;	/* Maximal mss, negotiated at connection setup */
+	struct tcp_fec fec;	/* FEC-related parameters		*/
 };
 
 static inline void tcp_clear_options(struct tcp_options_received *rx_opt)
 {
 	rx_opt->tstamp_ok = rx_opt->sack_ok = 0;
 	rx_opt->wscale_ok = rx_opt->snd_wscale = 0;
+	memset(&(rx_opt->fec), 0, sizeof(struct tcp_fec));
 }
 
 /* This is the max number of SACKS that we'll generate and process. It's safe
@@ -321,6 +341,24 @@ struct tcp_sock {
 	 * socket. Used to retransmit SYNACKs etc.
 	 */
 	struct request_sock *fastopen_rsk;
+
+/* TCP FEC parameters
+ *	type - negotiated FEC type to be used
+ *	next_seq - next sequence which was not FEC-encoded before
+ *	lost_len - bytes after rcv_nxt considered lost
+ *	flags - see TCP_FEC_* flag definitions above
+ *	bytes_rcv_queue - number of bytes stored in queued SKBs
+ *	rcv_queue - copies from the socket's receive queue kept for
+ *		FEC recovery
+ */
+	struct {
+		u8 type;
+		u32 next_seq;
+		u32 lost_len;
+		u8 flags;
+		u32 bytes_rcv_queue;
+		struct sk_buff_head rcv_queue;
+	} fec;
 };
 
 enum tsq_flags {
diff --git a/include/net/request_sock.h b/include/net/request_sock.h
index 59795e4..06705c2 100644
--- a/include/net/request_sock.h
+++ b/include/net/request_sock.h
@@ -62,6 +62,8 @@ struct request_sock {
 	struct sock			*sk;
 	u32				secid;
 	u32				peer_secid;
+	u8				fec_type; /* Encoding type (see
+						   * net/tcp_fec.h) */
 };
 
 static inline struct request_sock *reqsk_alloc(const struct request_sock_ops *ops)
diff --git a/include/net/tcp.h b/include/net/tcp.h
index 5bba80f..9a949a9 100644
--- a/include/net/tcp.h
+++ b/include/net/tcp.h
@@ -184,6 +184,7 @@ extern void tcp_time_wait(struct sock *sk, int state, int timeo);
  * experimental options. See draft-ietf-tcpm-experimental-options-00.txt
  */
 #define TCPOPT_FASTOPEN_MAGIC	0xF989
+#define TCPOPT_FEC_MAGIC	0xDC60
 
 /*
  *     TCP option lengths
@@ -199,6 +200,7 @@ extern void tcp_time_wait(struct sock *sk, int state, int timeo);
 #define TCPOLEN_COOKIE_PAIR    3	/* Cookie pair header extension */
 #define TCPOLEN_COOKIE_MIN     (TCPOLEN_COOKIE_BASE+TCP_COOKIE_MIN)
 #define TCPOLEN_COOKIE_MAX     (TCPOLEN_COOKIE_BASE+TCP_COOKIE_MAX)
+#define TCPOLEN_EXP_FEC_BASE   4
 
 /* But this is what stacks really send out. */
 #define TCPOLEN_TSTAMP_ALIGNED		12
@@ -209,6 +211,7 @@ extern void tcp_time_wait(struct sock *sk, int state, int timeo);
 #define TCPOLEN_SACK_PERBLOCK		8
 #define TCPOLEN_MD5SIG_ALIGNED		20
 #define TCPOLEN_MSS_ALIGNED		4
+#define TCPOLEN_EXP_FEC_NEGOTIATION_ALIGNED	8
 
 /* Flags in tp->nonagle */
 #define TCP_NAGLE_OFF		1	/* Nagle's algo is disabled */
@@ -240,6 +243,10 @@ extern void tcp_time_wait(struct sock *sk, int state, int timeo);
  * cookie/data not present. (For testing purpose!)
  */
 #define	TFO_SERVER_ALWAYS	0x1000
+/* Maximum number of in-order bytes kept in the receiver's buffer for FEC
+ * recoveries. The sender will never send more than this in a single FEC
+ * packet. */
+#define FEC_RCV_QUEUE_LIMIT	16000
 
 extern struct inet_timewait_death_row tcp_death_row;
 
@@ -287,6 +294,7 @@ extern int sysctl_tcp_thin_dupack;
 extern int sysctl_tcp_early_retrans;
 extern int sysctl_tcp_limit_output_bytes;
 extern int sysctl_tcp_challenge_ack_limit;
+extern int sysctl_tcp_fec;
 
 extern atomic_long_t tcp_memory_allocated;
 extern struct percpu_counter tcp_sockets_allocated;
@@ -713,6 +721,7 @@ struct tcp_skb_cb {
 	__u8		ip_dsfield;	/* IPv4 tos or IPv6 dsfield	*/
 	/* 1 byte hole */
 	__u32		ack_seq;	/* Sequence number ACK'd	*/
+	struct tcp_fec	*fec;		/* FEC parameters		*/
 };
 
 #define TCP_SKB_CB(__skb)	((struct tcp_skb_cb *)&((__skb)->cb[0]))
@@ -1093,6 +1102,7 @@ static inline void tcp_openreq_init(struct request_sock *req,
 	ireq->ecn_ok = 0;
 	ireq->rmt_port = tcp_hdr(skb)->source;
 	ireq->loc_port = tcp_hdr(skb)->dest;
+	req->fec_type = rx_opt->fec.type;
 }
 
 /* Compute time elapsed between SYNACK and the ACK completing 3WHS */
diff --git a/include/net/tcp_fec.h b/include/net/tcp_fec.h
new file mode 100644
index 0000000..ba219d1
--- /dev/null
+++ b/include/net/tcp_fec.h
@@ -0,0 +1,53 @@
+#ifndef _TCP_FEC_H
+#define _TCP_FEC_H
+
+#include <net/tcp.h>
+#include <asm/unaligned.h>
+
+/* FEC-encoding types (8 bits, internal) */
+#define TCP_FEC_TYPE_NONE		0 /* FEC disabled */
+#define TCP_FEC_TYPE_XOR_ALL		1 /* XOR every MSS length segment */
+#define TCP_FEC_TYPE_XOR_SKIP_1		2 /* XOR every other MSS length
+					   * segment */
+
+#define TCP_FEC_NUM_TYPES		3
+
+/*
+ * Returns true if FEC is enabled for the socket
+ */
+static inline bool tcp_fec_is_enabled(const struct tcp_sock *tp)
+{
+	return unlikely(tp->fec.type > 0);
+}
+
+/*
+ * Returns true if the current packet in the buffer is FEC-encoded
+ */
+static inline bool tcp_fec_is_encoded(const struct tcp_sock *tp)
+{
+	return unlikely((tp->rx_opt.fec.flags & TCP_FEC_ENCODED) &&
+			(tp->rx_opt.fec.saw_fec));
+}
+
+/*
+ * Decodes FEC parameters and stores them in the FEC struct
+ * @seq - sequence number of the packet
+ * @ack_seq - ACKed sequence number
+ * @is_syn - true, if option was attached to a packet with a SYN flag
+ * @ptr - points to the first byte of the FEC option after kind, length,
+ *	  and possible magic bytes
+ * @len - option length (without kind, length, magic bytes)
+ */
+int tcp_fec_decode_option(struct tcp_fec *fec, u32 seq, u32 ack_seq,
+			bool is_syn, const unsigned char *ptr,
+			unsigned int len);
+
+/*
+ * Encodes FEC parameters to wire format
+ * Pointer points to the first byte of the FEC option after kind, length,
+ * and possible magic bytes (pointer will be moved to first unoccupied byte)
+ */
+int tcp_fec_encode_option(struct tcp_sock *tp, struct tcp_fec *fec,
+			__be32 **ptr);
+
+#endif
diff --git a/include/uapi/linux/tcp.h b/include/uapi/linux/tcp.h
index 8d776eb..15e3aba 100644
--- a/include/uapi/linux/tcp.h
+++ b/include/uapi/linux/tcp.h
@@ -111,6 +111,7 @@ enum {
 #define TCP_REPAIR_OPTIONS	22
 #define TCP_FASTOPEN		23	/* Enable FastOpen on listeners */
 #define TCP_TIMESTAMP		24
+#define TCP_FEC			25	/* Forward error correction */
 
 struct tcp_repair_opt {
 	__u32	opt_code;
diff --git a/net/ipv4/Makefile b/net/ipv4/Makefile
index 089cb9f..7ec6035 100644
--- a/net/ipv4/Makefile
+++ b/net/ipv4/Makefile
@@ -6,7 +6,7 @@ obj-y     := route.o inetpeer.o protocol.o \
 	     ip_input.o ip_fragment.o ip_forward.o ip_options.o \
 	     ip_output.o ip_sockglue.o inet_hashtables.o \
 	     inet_timewait_sock.o inet_connection_sock.o \
-	     tcp.o tcp_input.o tcp_output.o tcp_timer.o tcp_ipv4.o \
+	     tcp.o tcp_fec.o tcp_input.o tcp_output.o tcp_timer.o tcp_ipv4.o \
 	     tcp_minisocks.o tcp_cong.o tcp_metrics.o tcp_fastopen.o \
 	     datagram.o raw.o udp.o udplite.o \
 	     arp.o icmp.o devinet.o af_inet.o  igmp.o \
diff --git a/net/ipv4/sysctl_net_ipv4.c b/net/ipv4/sysctl_net_ipv4.c
index fa2f63f..42ea051 100644
--- a/net/ipv4/sysctl_net_ipv4.c
+++ b/net/ipv4/sysctl_net_ipv4.c
@@ -771,6 +771,15 @@ static struct ctl_table ipv4_table[] = {
 		.proc_handler	= proc_dointvec_minmax,
 		.extra1		= &one
 	},
+	{
+		.procname	= "tcp_fec",
+		.data		= &sysctl_tcp_fec,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= proc_dointvec,
+		.extra1		= &zero,
+		.extra2		= &one,
+	},
 	{ }
 };
 
diff --git a/net/ipv4/tcp.c b/net/ipv4/tcp.c
index ab450c0..a243f86 100644
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@ -276,6 +276,7 @@
 #include <net/ip.h>
 #include <net/netdma.h>
 #include <net/sock.h>
+#include <net/tcp_fec.h>
 
 #include <asm/uaccess.h>
 #include <asm/ioctls.h>
@@ -2624,6 +2625,12 @@ static int do_tcp_setsockopt(struct sock *sk, int level,
 		else
 			tp->tsoffset = val - tcp_time_stamp;
 		break;
+	case TCP_FEC:
+		if (sysctl_tcp_fec && val >= 0 && val < TCP_FEC_NUM_TYPES)
+			tp->fec.type = val;
+		else
+			err = -EINVAL;
+		break;
 	default:
 		err = -ENOPROTOOPT;
 		break;
@@ -2840,6 +2847,9 @@ static int do_tcp_getsockopt(struct sock *sk, int level,
 	case TCP_TIMESTAMP:
 		val = tcp_time_stamp + tp->tsoffset;
 		break;
+	case TCP_FEC:
+		val = tp->fec.type;
+		break;
 	default:
 		return -ENOPROTOOPT;
 	}
diff --git a/net/ipv4/tcp_fec.c b/net/ipv4/tcp_fec.c
new file mode 100644
index 0000000..97a48ce
--- /dev/null
+++ b/net/ipv4/tcp_fec.c
@@ -0,0 +1,124 @@
+#include <net/tcp_fec.h>
+
+/* Decodes FEC parameters and stores them in the FEC struct
+ * @seq - sequence number of the packet
+ * @ack_seq - ACKed sequence number
+ * @is_syn - true, if option was attached to a packet with a SYN flag
+ * @ptr - points to the first byte of the FEC option after kind, length,
+ *	  and possible magic bytes
+ * @len - option length (without kind, length, magic bytes)
+ */
+int  tcp_fec_decode_option(struct tcp_fec *fec, u32 seq, u32 ack_seq,
+				bool is_syn, const unsigned char *ptr,
+				unsigned int len)
+{
+	/* reset / initialize option values which should be evaluated
+	 * with EVERY incoming packet
+	 */
+	fec->flags = 0;
+	fec->saw_fec = 1;
+
+	if (len == 1) {
+		/* Short option */
+		u8 val = *((u8 *) ptr);
+		if (is_syn) {
+			/* Negotiation */
+			fec->type = val;
+		} else {
+			/* Regular packet */
+			fec->flags = val;
+		}
+
+		return 0;
+	}
+
+	if (len == 4) {
+		/* Long option */
+		u32 val = get_unaligned_be32(ptr);
+		fec->flags = val >> 24;
+
+		if (fec->flags & TCP_FEC_ENCODED) {
+			fec->enc_seq = seq;
+			fec->enc_len = val & 0xFFFFFF;
+		} else if (fec->flags & TCP_FEC_RECOVERY_FAILED) {
+			fec->lost_seq = ack_seq;
+			fec->lost_len = val & 0xFFFFFF;
+		} else {
+			return -EINVAL;
+		}
+
+		return 0;
+	}
+
+	/* Invalid option length */
+	return -EINVAL;
+}
+
+/* Encodes FEC parameters to wire format
+ * @ptr - Encoded option is written to this memory location (and the pointer
+ *        is advanced to the next unoccupied byte, 4-byte aligned)
+ * Returns the length of the encoded option (including alignment)
+ */
+int tcp_fec_encode_option(struct tcp_sock *tp, struct tcp_fec *fec,
+			__be32 **ptr)
+{
+	int len;
+
+	fec->flags |= tp->fec.flags;
+	fec->lost_len = tp->fec.lost_len;
+	tp->fec.flags &= ~TCP_FEC_RECOVERY_CWR;
+	tp->fec.flags &= ~TCP_FEC_RECOVERY_FAILED;
+
+	/* Encode fixed option part (option kind, length, and magic bytes) */
+	if (fec->flags & (TCP_FEC_ENCODED | TCP_FEC_RECOVERY_FAILED))
+		len = 4 + TCPOLEN_EXP_FEC_BASE; /* Long option */
+	else
+		len = 1 + TCPOLEN_EXP_FEC_BASE; /* Short option */
+
+	**ptr = htonl((TCPOPT_EXP << 24) | (len << 16) | TCPOPT_FEC_MAGIC);
+	(*ptr)++;
+
+	if ((fec->flags & TCP_FEC_ENCODED) &&
+	    (fec->flags & TCP_FEC_RECOVERY_FAILED)) {
+		/* TODO Special case: need to separate loss indication
+		 * from encoding or make option 12 bytes long
+		 * This can only happen if a node receives and sends FEC
+		 * data
+		 */
+		fec->flags &= ~TCP_FEC_RECOVERY_FAILED;
+	}
+
+	if (fec->flags & TCP_FEC_ENCODED) {
+		/* FEC-encoded packets carry:
+		 * <Flags:8, Encoding length:24>
+		 */
+		**ptr = htonl((fec->flags << 24) |
+			      (fec->enc_len));
+		(*ptr)++;
+		return 8;
+	} else if (fec->flags & TCP_FEC_RECOVERY_FAILED) {
+		/* Packets with failed recovery indication carry:
+		 * <Flags:8, Bytes after ACKed seq lost:24>
+		 */
+		**ptr = htonl((fec->flags << 24) |
+			      (fec->lost_len));
+		(*ptr)++;
+		return 8;
+	} else if (fec->type) {
+		/* Negotiation packets carry: <Encoding type:8> */
+		**ptr = htonl((fec->type << 24) |
+			      (TCPOPT_NOP << 16) |
+			      (TCPOPT_NOP << 8) |
+			      TCPOPT_NOP);
+		(*ptr)++;
+		return 8;
+	} else {
+		/* All other packets carry: <Flags:8> */
+		**ptr = htonl((fec->flags << 24) |
+			      (TCPOPT_NOP << 16) |
+			      (TCPOPT_NOP << 8) |
+			      TCPOPT_NOP);
+		(*ptr)++;
+		return 8;
+	}
+}
diff --git a/net/ipv4/tcp_input.c b/net/ipv4/tcp_input.c
index 9c62257..3260498 100644
--- a/net/ipv4/tcp_input.c
+++ b/net/ipv4/tcp_input.c
@@ -70,6 +70,7 @@
 #include <linux/kernel.h>
 #include <net/dst.h>
 #include <net/tcp.h>
+#include <net/tcp_fec.h>
 #include <net/inet_common.h>
 #include <linux/ipsec.h>
 #include <asm/unaligned.h>
@@ -3564,6 +3565,20 @@ void tcp_parse_options(const struct sk_buff *skb,
 				break;
 #endif
 			case TCPOPT_EXP:
+				/* TCP FEC option shares code 254 using a
+				 * 16 bit magic number.
+				 */
+				if (sysctl_tcp_fec &&
+				    get_unaligned_be16(ptr) ==
+				    TCPOPT_FEC_MAGIC) {
+					tcp_fec_decode_option(&(opt_rx->fec),
+						ntohl(th->seq),
+						ntohl(th->ack_seq), th->syn,
+						ptr + 2,
+						opsize - TCPOLEN_EXP_FEC_BASE);
+					break;
+				}
+
 				/* Fast Open option shares code 254 using a
 				 * 16 bits magic number. It's valid only in
 				 * SYN or SYN-ACK with an even size.
@@ -5093,6 +5108,7 @@ int tcp_rcv_established(struct sock *sk, struct sk_buff *skb,
 	 */
 
 	tp->rx_opt.saw_tstamp = 0;
+	tp->rx_opt.fec.saw_fec = 0;
 
 	/*	pred_flags is 0xS?10 << 16 + snd_wnd
 	 *	if header_prediction is to be made
@@ -5463,6 +5479,15 @@ static int tcp_rcv_synsent_state_process(struct sock *sk, struct sk_buff *skb,
 		if (tcp_is_sack(tp) && sysctl_tcp_fack)
 			tcp_enable_fack(tp);
 
+		/*
+		 * FEC negotiation
+		 * Disable FEC if both ends do not agree on the FEC type used
+		 */
+		if (tp->fec.type != tp->rx_opt.fec.type) {
+			tp->fec.type = 0;
+			tp->rx_opt.fec.type = 0;
+		}
+
 		tcp_mtup_init(sk);
 		tcp_sync_mss(sk, icsk->icsk_pmtu_cookie);
 		tcp_initialize_rcv_mss(sk);
@@ -5740,6 +5765,10 @@ int tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb,
 
 				tcp_initialize_rcv_mss(sk);
 				tcp_fast_path_on(tp);
+
+				/* SYN requested FEC usage */
+				if (tp->rx_opt.fec.type > 0)
+					tp->fec.type = tp->rx_opt.fec.type;
 			} else {
 				return 1;
 			}
diff --git a/net/ipv4/tcp_ipv4.c b/net/ipv4/tcp_ipv4.c
index 7999fc5..04e3bf0 100644
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@ -74,6 +74,7 @@
 #include <net/xfrm.h>
 #include <net/netdma.h>
 #include <net/secure_seq.h>
+#include <net/tcp_fec.h>
 #include <net/tcp_memcontrol.h>
 
 #include <linux/inet.h>
@@ -213,6 +214,8 @@ int tcp_v4_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
 
 	tp->rx_opt.mss_clamp = TCP_MSS_DEFAULT;
 
+	memset(&(tp->rx_opt.fec), 0, sizeof(struct tcp_fec));
+
 	/* Socket identity is still unknown (sport may be zero).
 	 * However we set state to SYN-SENT and not releasing socket
 	 * lock select source port, enter ourselves into the hash tables and
diff --git a/net/ipv4/tcp_minisocks.c b/net/ipv4/tcp_minisocks.c
index 0f01788..1d0bf2f 100644
--- a/net/ipv4/tcp_minisocks.c
+++ b/net/ipv4/tcp_minisocks.c
@@ -483,6 +483,13 @@ struct sock *tcp_create_openreq_child(struct sock *sk, struct request_sock *req,
 		newtp->fastopen_rsk = NULL;
 		newtp->syn_data_acked = 0;
 
+		/* TCP FEC option */
+		newtp->rx_opt.fec.type = sysctl_tcp_fec ? req->fec_type : 0;
+		newtp->fec.type = newtp->fec.flags = 0;
+		newtp->fec.next_seq = newtp->snd_nxt;
+		newtp->fec.bytes_rcv_queue = 0;
+		skb_queue_head_init(&newtp->fec.rcv_queue);
+
 		TCP_INC_STATS_BH(sock_net(sk), TCP_MIB_PASSIVEOPENS);
 	}
 	return newsk;
diff --git a/net/ipv4/tcp_output.c b/net/ipv4/tcp_output.c
index ec335fa..00daf84 100644
--- a/net/ipv4/tcp_output.c
+++ b/net/ipv4/tcp_output.c
@@ -37,6 +37,7 @@
 #define pr_fmt(fmt) "TCP: " fmt
 
 #include <net/tcp.h>
+#include <net/tcp_fec.h>
 
 #include <linux/compiler.h>
 #include <linux/gfp.h>
@@ -65,6 +66,8 @@ int sysctl_tcp_base_mss __read_mostly = TCP_BASE_MSS;
 /* By default, RFC2861 behavior.  */
 int sysctl_tcp_slow_start_after_idle __read_mostly = 1;
 
+int sysctl_tcp_fec __read_mostly;
+
 static bool tcp_write_xmit(struct sock *sk, unsigned int mss_now, int nonagle,
 			   int push_one, gfp_t gfp);
 
@@ -381,6 +384,7 @@ static inline bool tcp_urg_mode(const struct tcp_sock *tp)
 #define OPTION_MD5		(1 << 2)
 #define OPTION_WSCALE		(1 << 3)
 #define OPTION_FAST_OPEN_COOKIE	(1 << 8)
+#define OPTION_FEC		(1 << 9)
 
 struct tcp_out_options {
 	u16 options;		/* bit field of OPTION_* */
@@ -391,6 +395,7 @@ struct tcp_out_options {
 	__u8 *hash_location;	/* temporary pointer, overloaded */
 	__u32 tsval, tsecr;	/* need to include OPTION_TS */
 	struct tcp_fastopen_cookie *fastopen_cookie;	/* Fast open cookie */
+	struct tcp_fec fec;	/* FEC parameters */
 };
 
 /* Write previously computed TCP options to the packet.
@@ -490,6 +495,9 @@ static void tcp_options_write(__be32 *ptr, struct tcp_sock *tp,
 		}
 		ptr += (foc->len + 3) >> 2;
 	}
+
+	if (unlikely(OPTION_FEC & options))
+		tcp_fec_encode_option(tp, &(opts->fec), &ptr);
 }
 
 /* Compute TCP options for SYN packets. This is not the final
@@ -553,6 +561,14 @@ static unsigned int tcp_syn_options(struct sock *sk, struct sk_buff *skb,
 		}
 	}
 
+	/* Prepare for FEC negotation if requested */
+	if (unlikely(tcp_fec_is_enabled(tp)) &&
+	    remaining >= TCPOLEN_EXP_FEC_NEGOTIATION_ALIGNED) {
+		opts->options |= OPTION_FEC;
+		opts->fec.type = tp->fec.type;
+		remaining -= TCPOLEN_EXP_FEC_NEGOTIATION_ALIGNED;
+	}
+
 	return MAX_TCP_OPTION_SPACE - remaining;
 }
 
@@ -614,6 +630,16 @@ static unsigned int tcp_synack_options(struct sock *sk,
 		}
 	}
 
+	/* Handle request for FEC support from other side
+	 * (respond with same FEC option if FEC is locally supported)
+	 */
+	if (sysctl_tcp_fec && unlikely(req->fec_type) &&
+	    remaining >= TCPOLEN_EXP_FEC_NEGOTIATION_ALIGNED) {
+		opts->options |= OPTION_FEC;
+		opts->fec.type = req->fec_type;
+		remaining -= TCPOLEN_EXP_FEC_NEGOTIATION_ALIGNED;
+	}
+
 	return MAX_TCP_OPTION_SPACE - remaining;
 }
 
@@ -657,6 +683,19 @@ static unsigned int tcp_established_options(struct sock *sk, struct sk_buff *skb
 			opts->num_sack_blocks * TCPOLEN_SACK_PERBLOCK;
 	}
 
+	/* Prepare option if connection has FEC enabled */
+	if (tcp_fec_is_enabled(tp)) {
+		opts->options |= OPTION_FEC;
+		if (tcb && tcb->fec)
+			opts->fec = *(tcb->fec);
+
+		/* regardless of packet type we need 4 more bytes
+		 * including alignment
+		 */
+		size += 4;
+		size += TCPOLEN_EXP_FEC_BASE;
+	}
+
 	return size;
 }
 
@@ -2956,6 +2995,12 @@ int tcp_connect(struct sock *sk)
 	 */
 	tp->snd_nxt = tp->write_seq;
 	tp->pushed_seq = tp->write_seq;
+
+	/* Initialize FEC members */
+	tp->fec.next_seq = tp->snd_nxt;
+	tp->fec.bytes_rcv_queue = 0;
+	skb_queue_head_init(&tp->fec.rcv_queue);
+
 	TCP_INC_STATS(sock_net(sk), TCP_MIB_ACTIVEOPENS);
 
 	/* Timer for repeating the SYN until an answer. */
diff --git a/net/ipv6/tcp_ipv6.c b/net/ipv6/tcp_ipv6.c
index 0a17ed9..dc2d12a 100644
--- a/net/ipv6/tcp_ipv6.c
+++ b/net/ipv6/tcp_ipv6.c
@@ -288,6 +288,8 @@ static int tcp_v6_connect(struct sock *sk, struct sockaddr *uaddr,
 
 	tp->rx_opt.mss_clamp = IPV6_MIN_MTU - sizeof(struct tcphdr) - sizeof(struct ipv6hdr);
 
+	memset(&(tp->rx_opt.fec), 0, sizeof(struct tcp_fec));
+
 	inet->inet_dport = usin->sin6_port;
 
 	tcp_set_state(sk, TCP_SYN_SENT);
-- 
2.1.0.rc2.206.gedb03e5

